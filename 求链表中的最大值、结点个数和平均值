描述
c. 已知head为单链表的表头指针，链表中存储的都是整形数据，实现下列运算的递归算法：

i. 求链表中的最大值

ii. 求链表中的结点个数 

iii. 求所有整数的平均值



用例1：

假如输入为：

4

10 30 60 100

则输出为：

最大值：100

结点个数：4

平均值：50



用例2：

假如输入为：

5

1 3 5 7 9

则输出为：

最大值：9

结点个数：5

平均值：5



用例3：

假如输入为：

10

1 2 3 4 5 6 7 8 9 10

则输出为：

最大值：10

结点个数：10

平均值：5.5



用例4：

假如输入为：

1

4

则输出为：

最大值：4

结点个数：1

平均值：4





题目：
#include <iostream>
using namespace std;
const int MinNumber = -1000000;
struct Node {
    Node(int x)
    {
        value = x;
        next = NULL;
    }
    int value;
    Node* next;
};
/*
TODO:求链表中的最大值,并返回。如果链表a为空，则直接返回MinNumber
*/
int GetMax(Node* a)
{
}
/*
TODO:求链表中的结点个数，并返回个数。
 */
int GetNodeNum(Node* a)
{
}
/*
TODO: 求所有整数的平均值
*/
double GetAvg(Node* a, int n)
{
}

int main()
{
    int count;
    cin >> count;
    Node *a = NULL, *p;
    for (int i = 0; i < count; i++) {
        int iValue;
        cin >> iValue;
        if (a == NULL) {
            a = new Node(iValue);
            p = a;
        } else {
            p->next = new Node(iValue);
            p = p->next;
        }
    }
    int max = GetMax(a);
    int nodeNum = GetNodeNum(a);
    double avg = GetAvg(a, nodeNum);
    cout << "最大值：" << max << endl;
    cout << "结点个数：" << nodeNum << endl;
    cout << "平均值：" << avg << endl;
}






答案：：
#include <iostream>
using namespace std;
const int MinNumber = -1000000;
struct Node {
    Node(int x)
    {
        value = x;
        next = NULL;
    }
    int value;
    Node* next;
};
/*
TODO:求链表中的最大值,并返回。如果链表a为空，则直接返回MinNumber
*/
int GetMax(Node* a)
{
    if (a == NULL)
        return MinNumber;
    int bValue = GetMax(a->next);
    if (a->value > bValue)
        return a->value;
    else
        return bValue;
}
/*
TODO:求链表中的结点个数，并返回个数。
 */
int GetNodeNum(Node* a)
{
    if (a == NULL)
        return 0;
    return 1 + GetNodeNum(a->next);
}
/*
TODO: 求所有整数的平均值
*/
double GetAvg(Node* a, int n)
{
    if (a == NULL)
        return 0;
    return a->value / (double)n + GetAvg(a->next, n);
}

int main()
{
    int count;
    cin >> count;
    Node *a = NULL, *p;
    for (int i = 0; i < count; i++) {
        int iValue;
        cin >> iValue;
        if (a == NULL) {
            a = new Node(iValue);
            p = a;
        } else {
            p->next = new Node(iValue);
            p = p->next;
        }
    }
    int max = GetMax(a);
    int nodeNum = GetNodeNum(a);
    double avg = GetAvg(a, nodeNum);
    cout << "最大值：" << max << endl;
    cout << "结点个数：" << nodeNum << endl;
    cout << "平均值：" << avg << endl;
}
